# -*- coding: utf-8 -*-
"""Assignment 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xwRHek3G6nNLRlftMINVXpvcYmeQMhDh

PROJECT TITLE: Airlines Data Analytics for Avaition Industry

Team ID : PNT2022TMID29101
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression

"""2.LOAD THE DATASET INTO COLLAB"""

df=pd.read_csv("/content/abalone.csv")

df['age'] = df['Rings']+1.5
df = df.drop('Rings', axis = 1)

"""3.UNIVARIATE ANALYSIS"""

df.hist(figsize=(20,10), grid=False, layout=(2, 4), bins = 30)

df.groupby('Sex')[['Length', 'Diameter', 'Height', 'Whole weight', 'Shucked weight',
       'Viscera weight', 'Shell weight', 'age']].mean().sort_values('age')

"""3.BIVARIATE ANALYSIS & MULTIVARIATE ANALYSIS"""

numerical_features = df.select_dtypes(include = [np.number]).columns
sns.pairplot(df[numerical_features])

"""Descriptive statistics"""

df.describe()

"""5.Check for Missing Values"""

df.isnull().sum()

"""6.OUTLIER HANDLING"""

df = pd.get_dummies(df)
dummy_data = df.copy()

var = 'Viscera weight'
plt.scatter(x = df[var], y = df['age'],)
plt.grid(True)

df.drop(df[(df['Viscera weight']> 0.5) & (df['age'] < 20)].index, inplace=True)
df.drop(df[(df['Viscera weight']<0.5) & (df['age'] > 25)].index, inplace=True)

var = 'Shell weight'
plt.scatter(x = df[var], y = df['age'],)
plt.grid(True)
#Outliers removal
df.drop(df[(df['Shell weight']> 0.6) & (df['age'] < 25)].index, inplace=True)
df.drop(df[(df['Shell weight']<0.8) & (df['age'] > 25)].index, inplace=True)

var = 'Shucked weight'
plt.scatter(x = df[var], y = df['age'],)
plt.grid(True)

#Outlier removal
df.drop(df[(df['Shucked weight']>= 1) & (df['age'] < 20)].index, inplace=True)
df.drop(df[(df['Shucked weight']<1) & (df['age'] > 20)].index, inplace=True)

var = 'Whole weight'
plt.scatter(x = df[var], y = df['age'])
plt.grid(True)

df.drop(df[(df['Whole weight'] >= 2.5) &
          (df['age'] < 25)].index, inplace = True)
df.drop(df[(df['Whole weight']<2.5) & (
df['age'] > 25)].index, inplace = True)

var = 'Diameter'
plt.scatter(x = df[var], y = df['age'])
plt.grid(True)

df.drop(df[(df['Diameter'] <0.1) &
          (df['age'] < 5)].index, inplace = True)
df.drop(df[(df['Diameter']<0.6) & (
df['age'] > 25)].index, inplace = True)
df.drop(df[(df['Diameter']>=0.6) & (
df['age'] < 25)].index, inplace = True)

var = 'Height'
plt.scatter(x = df[var], y = df['age'])
plt.grid(True)
df.drop(df[(df['Height'] > 0.4) &
          (df['age'] < 15)].index, inplace = True)
df.drop(df[(df['Height']<0.4) & (
df['age'] > 25)].index, inplace = True)

var = 'Length'
plt.scatter(x = df[var], y = df['age'])
plt.grid(True)

df.drop(df[(df['Length'] <0.1) &
          (df['age'] < 5)].index, inplace = True)
df.drop(df[(df['Length']<0.8) & (
df['age'] > 25)].index, inplace = True)
df.drop(df[(df['Length']>=0.8) & (
df['age'] < 25)].index, inplace = True)

"""7.Categorical columns"""

numerical_features = df.select_dtypes(include = [np.number]).columns
categorical_features = df.select_dtypes(include = [np.object]).columns

numerical_features

categorical_features

"""ENCODING"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
print(df.Length.value_counts())

"""8.Split the dependent and independent variables"""

x=df.iloc[:,:5]
x

y=df.iloc[:,5:]
y

"""9.Feature Scaling"""

#Scaling the Independent Variables
print ("\n ORIGINAL VALUES: \n\n", x,y)

from sklearn import preprocessing
min_max_scaler = preprocessing.MinMaxScaler(feature_range =(0, 1)) 
new_y= min_max_scaler.fit_transform(x,y) 
print ("\n VALUES AFTER MIN MAX SCALING: \n\n", new_y)

"""10.Split the data into training and testing"""

#Split the data into Training and Testing
X = df.drop('age', axis = 1)
y = df['age']